# -*- coding: utf-8 -*-
"""1-grid-creation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tcFCLfFUh3sIZNbzdRQju28qvPt7ZLYM
"""

!pip install PyShp
!pip install Shapely
!pip install pyproj

import shapefile
from shapely.geometry import Point # Point class
from shapely.geometry import shape
import pandas as pd
import numpy as np
from google.colab import files, drive
import pyproj

province = "MB"
province_full_name = "Manitoba"

provinceBounds = {"AL":{"longMax":-109.00 , "longMin":-121.00 , "latMax": 61.00, "latMin": 48.00},
                  "BC": {"longMax":-113.0, "longMin":-140.00, "latMax": 61.00, "latMin": 47.00},
                  "ON": {"longMax":-73.00, "longMin": -96.00, "latMax":57.0, "latMin":40.0},
                  "QB": {"longMax": -55.0, "longMin":-81.00, "latMax": 64.0, "latMin": 43.0 },
                  "SK": {"longMax": -100.0, "longMin":-111.0, "latMax": 61.0, "latMin": 48.0},
                  "MB": {"longMax": -87.00, "longMin":-103.00, "latMax": 61.00, "latMin": 47.00}}

# Mount Google Drive
drive.mount('/content/gdrive')
root_path = f'/content/gdrive/My Drive/Capstone Public Folder/Data/'

## get projections information 
def esriprj2standards(shapeprj_path):
   prj_file = open(shapeprj_path, 'r')
   prj_txt = prj_file.read()
   srs = osr.SpatialReference()
   srs.ImportFromESRI([prj_txt])
   proj4 = srs.ExportToProj4() 
   print('Proj4 is: %s' % proj4)
   return(proj4)

proj4 = esriprj2standards(root_path + 'Canada/Canada.prj')

provinces = shapefile.Reader(root_path + 'Canada/Canada.shp')
transformer = pyproj.Proj(proj4)

def checkProvinceBounds(lat, lng):
  pt = Point(transformer(lng, lat))
  all_shapes = provinces.shapes() # get all the polygons
  all_records = provinces.records()
  i = 0
  while i < len(all_shapes):
      bound = shape(all_shapes[i]) # get a boundary polygon
      name = all_records[i][0]
      if pt.within(bound) and name == province_full_name:
        return True
      i +=1
  return False

longMax = provinceBounds[province]["longMax"]
longMin = provinceBounds[province]["longMin"]
latMax = provinceBounds[province]["latMax"]
latMin = provinceBounds[province]["latMin"]

currLong = longMin
currLat = latMin

validLong = list()
validLat = list()

## List of all valid long values
while currLong <=  longMax:
  validLong.append(currLong)
  currLong += 0.2
  currLong = round(currLong, 5)

## List of all valid lat values
while currLat <= latMax:
  validLat.append(currLat)
  currLat += 0.2
  currLat = round(currLat, 5)

# format is lat|long, latitude, longitude
validLatLong = []

for lat in validLat:
  for long in validLong:
    latLong = str(lat) + "|" + str(long)
    centroid = str(round(lat + 0.1, 5)) + "|" + str(round(long + 0.1, 5))
    # check that lat, long values are within province bounds
    if checkProvinceBounds(lat, long) == True:
      validLatLong.append([latLong, lat, long, centroid])

print(len(validLatLong))

validDf = pd.DataFrame(validLatLong, columns = ['KEY', 'LATITUDE', 'LONGITUDE', 'CENTROID'])
validDf.to_csv(root_path + f'{province} Location/{province}_grid_system.csv.gz', compression= 'gzip', index = False)